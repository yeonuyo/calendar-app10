{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hwfre\\\\OneDrive\\\\Desktop\\\\\\uAC1C\\uC778\\\\tlqnstjf\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from './components/Calendar';\nimport EventList from './components/EventList';\nimport EventForm from './components/EventForm';\nimport Chatbot from './components/Chatbot';\nimport { format, isSameDay, isToday, addDays } from 'date-fns';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showEventForm, setShowEventForm] = useState(false);\n  const [editingEvent, setEditingEvent] = useState(null);\n  const [activeTab, setActiveTab] = useState('events'); // 'events' 또는 'chatbot'\n  const [notification, setNotification] = useState(null);\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  // 로컬 스토리지에서 이벤트 불러오기\n  useEffect(() => {\n    const savedEvents = localStorage.getItem('events');\n    if (savedEvents) {\n      try {\n        const parsedEvents = JSON.parse(savedEvents);\n        // 날짜 문자열을 Date 객체로 변환\n        const eventsWithDates = parsedEvents.map(event => ({\n          ...event,\n          date: new Date(event.date)\n        }));\n        setEvents(eventsWithDates);\n      } catch (error) {\n        console.error('Failed to parse saved events:', error);\n      }\n    }\n  }, []);\n\n  // 이벤트가 변경될 때마다 로컬 스토리지에 저장\n  useEffect(() => {\n    try {\n      localStorage.setItem('events', JSON.stringify(events));\n    } catch (error) {\n      console.error('Failed to save events:', error);\n    }\n  }, [events]);\n\n  // 로컬 알림 권한 요청\n  useEffect(() => {\n    if ('Notification' in window) {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  // 마감일 알림 체크\n  useEffect(() => {\n    const checkDeadlines = () => {\n      try {\n        const today = new Date();\n        const tomorrow = addDays(today, 1);\n\n        // 내일 마감인 과제들 찾기\n        const tomorrowDeadlines = events.filter(event => {\n          if (!event || !event.date || !event.type) return false;\n          const eventDate = new Date(event.date);\n          return isSameDay(eventDate, tomorrow) && event.type === 'assignment';\n        });\n        if (tomorrowDeadlines.length > 0) {\n          // 현재 날짜와 마감일 포맷팅\n          const todayStr = format(today, 'yyyy년 M월 d일');\n          const tomorrowStr = format(tomorrow, 'yyyy년 M월 d일');\n\n          // 앱 내부 알림 메시지 생성\n          const appMessage = tomorrowDeadlines.length === 1 ? `[${todayStr}] 내일(${tomorrowStr}) 마감 과제가 있습니다:\\n${tomorrowDeadlines[0].title}` : `[${todayStr}] 내일(${tomorrowStr}) 마감 과제가 총 ${tomorrowDeadlines.length}건 있습니다`;\n          showNotification(appMessage, 'warning');\n\n          // 브라우저 알림 표시\n          if ('Notification' in window && Notification.permission === 'granted') {\n            try {\n              // 과제 목록 생성\n              const deadlinesList = tomorrowDeadlines.length === 1 ? tomorrowDeadlines[0].title : tomorrowDeadlines.map((event, index) => `${index + 1}. ${event.title}`).join('\\n');\n              const notificationOptions = {\n                body: `현재: ${todayStr}\\n마감일: ${tomorrowStr}\\n\\n${deadlinesList}`,\n                icon: '/favicon.ico',\n                tag: 'deadline-notification',\n                requireInteraction: true\n              };\n\n              // 이전 알림이 있다면 닫기\n              if (window.currentNotification) {\n                window.currentNotification.close();\n              }\n\n              // 새 알림 생성 및 저장\n              window.currentNotification = new Notification('마감 예정 과제 알림', notificationOptions);\n            } catch (error) {\n              console.error('브라우저 알림 생성 중 오류:', error);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('마감일 체크 중 오류:', error);\n      }\n    };\n\n    // 페이지 로드 시 한 번 체크\n    checkDeadlines();\n\n    // 1시간마다 체크 (3600000ms = 1시간)\n    const intervalId = setInterval(checkDeadlines, 3600000);\n    return () => {\n      clearInterval(intervalId);\n      // 컴포넌트 언마운트 시 알림 정리\n      if (window.currentNotification) {\n        window.currentNotification.close();\n      }\n    };\n  }, [events]);\n  const getEventTypeName = type => {\n    switch (type) {\n      case 'assignment':\n        return '과제';\n      case 'exam':\n        return '시험';\n      case 'lecture':\n        return '강의';\n      case 'meeting':\n        return '미팅';\n      case 'academic':\n        return '학사일정';\n      case 'personal':\n        return '개인일정';\n      default:\n        return '일정';\n    }\n  };\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      message,\n      type\n    });\n    setTimeout(() => {\n      setNotification(null);\n    }, 3000);\n  };\n  const addEvent = eventData => {\n    const newEvent = {\n      ...eventData,\n      id: eventData.id || Date.now().toString(),\n      date: new Date(eventData.date)\n    };\n    if (editingEvent) {\n      setEvents(events.map(event => event.id === editingEvent.id ? newEvent : event));\n      showNotification('일정이 수정되었습니다.');\n    } else {\n      setEvents([...events, newEvent]);\n      showNotification('새로운 일정이 추가되었습니다.');\n    }\n\n    // 일정 추가/수정 후 처리\n    setShowEventForm(false);\n    setEditingEvent(null);\n    setSelectedDate(newEvent.date);\n    setCurrentMonth(newEvent.date);\n    setActiveTab('events');\n  };\n  const deleteEvent = eventId => {\n    if (window.confirm('이 일정을 삭제하시겠습니까?')) {\n      setEvents(events.filter(event => event.id !== eventId));\n      showNotification('일정이 삭제되었습니다.', 'warning');\n    }\n  };\n  const editEvent = event => {\n    setEditingEvent(event);\n    setShowEventForm(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD559\\uC0AC\\uC77C\\uC815 \\uBC0F \\uACFC\\uC81C \\uAD00\\uB9AC \\uCE98\\uB9B0\\uB354\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-container\",\n      children: notification && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification ${notification.type}`,\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(Calendar, {\n        events: events,\n        selectedDate: selectedDate,\n        setSelectedDate: setSelectedDate,\n        currentMonth: currentMonth,\n        setCurrentMonth: setCurrentMonth,\n        onAddEvent: () => {\n          setEditingEvent(null);\n          setShowEventForm(true);\n        },\n        setActiveTab: setActiveTab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tab-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-button ${activeTab === 'events' ? 'active' : ''}`,\n            onClick: () => setActiveTab('events'),\n            children: \"\\uC77C\\uC815 \\uBAA9\\uB85D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tab-button ${activeTab === 'chatbot' ? 'active' : ''}`,\n            onClick: () => setActiveTab('chatbot'),\n            children: \"\\uCC57\\uBD07\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), activeTab === 'events' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(EventList, {\n            events: events.filter(event => {\n              const eventDate = new Date(event.date);\n              return isSameDay(eventDate, selectedDate);\n            }),\n            onDelete: deleteEvent,\n            onEdit: editEvent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), showEventForm && /*#__PURE__*/_jsxDEV(EventForm, {\n            selectedDate: selectedDate,\n            onSave: addEvent,\n            onCancel: () => {\n              setShowEventForm(false);\n              setEditingEvent(null);\n            },\n            event: editingEvent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this), !showEventForm && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-event-button\",\n            onClick: () => {\n              setEditingEvent(null);\n              setShowEventForm(true);\n            },\n            children: \"\\uC77C\\uC815 \\uCD94\\uAC00\\uD558\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Chatbot, {\n          onSave: addEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M3R2MPB2MgcXQjp22y891FyW/zY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","EventList","EventForm","Chatbot","format","isSameDay","isToday","addDays","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","events","setEvents","selectedDate","setSelectedDate","Date","showEventForm","setShowEventForm","editingEvent","setEditingEvent","activeTab","setActiveTab","notification","setNotification","currentMonth","setCurrentMonth","savedEvents","localStorage","getItem","parsedEvents","JSON","parse","eventsWithDates","map","event","date","error","console","setItem","stringify","window","Notification","requestPermission","checkDeadlines","today","tomorrow","tomorrowDeadlines","filter","type","eventDate","length","todayStr","tomorrowStr","appMessage","title","showNotification","permission","deadlinesList","index","join","notificationOptions","body","icon","tag","requireInteraction","currentNotification","close","intervalId","setInterval","clearInterval","getEventTypeName","message","setTimeout","addEvent","eventData","newEvent","id","now","toString","deleteEvent","eventId","confirm","editEvent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddEvent","onClick","onDelete","onEdit","onSave","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/hwfre/OneDrive/Desktop/개인/tlqnstjf/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Calendar from './components/Calendar';\nimport EventList from './components/EventList';\nimport EventForm from './components/EventForm';\nimport Chatbot from './components/Chatbot';\nimport { format, isSameDay, isToday, addDays } from 'date-fns';\nimport './App.css';\n\nfunction App() {\n  const [events, setEvents] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [showEventForm, setShowEventForm] = useState(false);\n  const [editingEvent, setEditingEvent] = useState(null);\n  const [activeTab, setActiveTab] = useState('events'); // 'events' 또는 'chatbot'\n  const [notification, setNotification] = useState(null);\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  // 로컬 스토리지에서 이벤트 불러오기\n  useEffect(() => {\n    const savedEvents = localStorage.getItem('events');\n    if (savedEvents) {\n      try {\n        const parsedEvents = JSON.parse(savedEvents);\n        // 날짜 문자열을 Date 객체로 변환\n        const eventsWithDates = parsedEvents.map(event => ({\n          ...event,\n          date: new Date(event.date)\n        }));\n        setEvents(eventsWithDates);\n      } catch (error) {\n        console.error('Failed to parse saved events:', error);\n      }\n    }\n  }, []);\n\n  // 이벤트가 변경될 때마다 로컬 스토리지에 저장\n  useEffect(() => {\n    try {\n      localStorage.setItem('events', JSON.stringify(events));\n    } catch (error) {\n      console.error('Failed to save events:', error);\n    }\n  }, [events]);\n\n  // 로컬 알림 권한 요청\n  useEffect(() => {\n    if ('Notification' in window) {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  // 마감일 알림 체크\n  useEffect(() => {\n    const checkDeadlines = () => {\n      try {\n        const today = new Date();\n        const tomorrow = addDays(today, 1);\n        \n        // 내일 마감인 과제들 찾기\n        const tomorrowDeadlines = events.filter(event => {\n          if (!event || !event.date || !event.type) return false;\n          const eventDate = new Date(event.date);\n          return isSameDay(eventDate, tomorrow) && event.type === 'assignment';\n        });\n\n        if (tomorrowDeadlines.length > 0) {\n          // 현재 날짜와 마감일 포맷팅\n          const todayStr = format(today, 'yyyy년 M월 d일');\n          const tomorrowStr = format(tomorrow, 'yyyy년 M월 d일');\n          \n          // 앱 내부 알림 메시지 생성\n          const appMessage = tomorrowDeadlines.length === 1\n            ? `[${todayStr}] 내일(${tomorrowStr}) 마감 과제가 있습니다:\\n${tomorrowDeadlines[0].title}`\n            : `[${todayStr}] 내일(${tomorrowStr}) 마감 과제가 총 ${tomorrowDeadlines.length}건 있습니다`;\n          \n          showNotification(appMessage, 'warning');\n\n          // 브라우저 알림 표시\n          if ('Notification' in window && Notification.permission === 'granted') {\n            try {\n              // 과제 목록 생성\n              const deadlinesList = tomorrowDeadlines.length === 1 \n                ? tomorrowDeadlines[0].title\n                : tomorrowDeadlines\n                    .map((event, index) => `${index + 1}. ${event.title}`)\n                    .join('\\n');\n\n              const notificationOptions = {\n                body: `현재: ${todayStr}\\n마감일: ${tomorrowStr}\\n\\n${deadlinesList}`,\n                icon: '/favicon.ico',\n                tag: 'deadline-notification',\n                requireInteraction: true\n              };\n\n              // 이전 알림이 있다면 닫기\n              if (window.currentNotification) {\n                window.currentNotification.close();\n              }\n\n              // 새 알림 생성 및 저장\n              window.currentNotification = new Notification('마감 예정 과제 알림', notificationOptions);\n            } catch (error) {\n              console.error('브라우저 알림 생성 중 오류:', error);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('마감일 체크 중 오류:', error);\n      }\n    };\n\n    // 페이지 로드 시 한 번 체크\n    checkDeadlines();\n\n    // 1시간마다 체크 (3600000ms = 1시간)\n    const intervalId = setInterval(checkDeadlines, 3600000);\n\n    return () => {\n      clearInterval(intervalId);\n      // 컴포넌트 언마운트 시 알림 정리\n      if (window.currentNotification) {\n        window.currentNotification.close();\n      }\n    };\n  }, [events]);\n\n  const getEventTypeName = (type) => {\n    switch (type) {\n      case 'assignment':\n        return '과제';\n      case 'exam':\n        return '시험';\n      case 'lecture':\n        return '강의';\n      case 'meeting':\n        return '미팅';\n      case 'academic':\n        return '학사일정';\n      case 'personal':\n        return '개인일정';\n      default:\n        return '일정';\n    }\n  };\n\n  const showNotification = (message, type = 'success') => {\n    setNotification({ message, type });\n    setTimeout(() => {\n      setNotification(null);\n    }, 3000);\n  };\n\n  const addEvent = (eventData) => {\n    const newEvent = {\n      ...eventData,\n      id: eventData.id || Date.now().toString(),\n      date: new Date(eventData.date)\n    };\n\n    if (editingEvent) {\n      setEvents(events.map(event => \n        event.id === editingEvent.id ? newEvent : event\n      ));\n      showNotification('일정이 수정되었습니다.');\n    } else {\n      setEvents([...events, newEvent]);\n      showNotification('새로운 일정이 추가되었습니다.');\n    }\n\n    // 일정 추가/수정 후 처리\n    setShowEventForm(false);\n    setEditingEvent(null);\n    setSelectedDate(newEvent.date);\n    setCurrentMonth(newEvent.date);\n    setActiveTab('events');\n  };\n\n  const deleteEvent = (eventId) => {\n    if (window.confirm('이 일정을 삭제하시겠습니까?')) {\n      setEvents(events.filter(event => event.id !== eventId));\n      showNotification('일정이 삭제되었습니다.', 'warning');\n    }\n  };\n\n  const editEvent = (event) => {\n    setEditingEvent(event);\n    setShowEventForm(true);\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>학사일정 및 과제 관리 캘린더</h1>\n      </header>\n      <div className=\"notification-container\">\n        {notification && (\n          <div className={`notification ${notification.type}`}>\n            {notification.message}\n          </div>\n        )}\n      </div>\n      <main className=\"app-main\">\n        <Calendar \n          events={events} \n          selectedDate={selectedDate}\n          setSelectedDate={setSelectedDate}\n          currentMonth={currentMonth}\n          setCurrentMonth={setCurrentMonth}\n          onAddEvent={() => {\n            setEditingEvent(null);\n            setShowEventForm(true);\n          }}\n          setActiveTab={setActiveTab}\n        />\n        <div className=\"sidebar\">\n          <div className=\"tab-navigation\">\n            <button \n              className={`tab-button ${activeTab === 'events' ? 'active' : ''}`}\n              onClick={() => setActiveTab('events')}\n            >\n              일정 목록\n            </button>\n            <button \n              className={`tab-button ${activeTab === 'chatbot' ? 'active' : ''}`}\n              onClick={() => setActiveTab('chatbot')}\n            >\n              챗봇\n            </button>\n          </div>\n\n          {activeTab === 'events' ? (\n            <>\n              <EventList \n                events={events.filter(event => {\n                  const eventDate = new Date(event.date);\n                  return isSameDay(eventDate, selectedDate);\n                })}\n                onDelete={deleteEvent}\n                onEdit={editEvent}\n              />\n              {showEventForm && (\n                <EventForm \n                  selectedDate={selectedDate}\n                  onSave={addEvent}\n                  onCancel={() => {\n                    setShowEventForm(false);\n                    setEditingEvent(null);\n                  }}\n                  event={editingEvent}\n                />\n              )}\n              {!showEventForm && (\n                <button \n                  className=\"add-event-button\"\n                  onClick={() => {\n                    setEditingEvent(null);\n                    setShowEventForm(true);\n                  }}\n                >\n                  일정 추가하기\n                </button>\n              )}\n            </>\n          ) : (\n            <Chatbot onSave={addEvent} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}